#!/usr/bin/env ruby
# encoding: utf-8

require 'rubygems'
require 'erb'
require 'fileutils'
require 'micro-optparse'
gem 'google_drive', '>=2.0.0'
require 'google_drive'
require 'json'

require_relative 'helpers/string'
require_relative 'helpers/term'

def copy_with_path(src, dst)
  FileUtils.mkdir_p(File.dirname(dst))
  FileUtils.cp(src, dst)
end

def show_error(error_string)
  puts 'Error!'.red
  puts error_string
  exit
end

def process_template(template_name, target_directory, generated_file_name)
  input_file = File.open("templates/"+template_name, "rb")
  template = input_file.read
  input_file.close
  renderer = ERB.new(template)
  output = renderer.result()
  output_file = File.new(generated_file_name, "w")
  output_file.write(output)
  output_file.close
  copy_with_path(generated_file_name, target_directory+generated_file_name)
  FileUtils.rm(generated_file_name)
end

# Generation for iOS

def generate_ios(language, target_directory)
  @current_lang = language
  process_template 'ios_localizable.erb', target_directory, 'Localizable.strings'
  puts ' > '+language.yellow
end

def generate_ios_constants(target_directory, filename)
  @filename = filename
  process_template 'ios_constant_localizable.erb', target_directory, "#{filename}.h"
  puts ' > '+"#{filename}.h".yellow
end

def generate_ios_constants_swift(target_directory, filename, extension, sufix)
  @filename = filename
  @isExtension = extension
  @sufix = sufix
  process_template 'ios_constant_localizable_swift.erb', target_directory, "#{filename}.swift"
  puts ' > '+"#{filename}.swift".yellow
end

# Generation for Android

def generate_android(language, target_directory)
  @current_lang = language
  process_template 'android_localizable.erb', target_directory, 'gen-strings.xml'
  puts ' > '+language.yellow
end

# Generation for JSON

def generate_json(languages, target_file)
  result = Hash.new
  languages.each do |lang|
    lang_values = Hash.new
    @terms.each do |term| 
      lang_values.store term.keyword_android, term.values_json[lang] unless term.is_comment?
    end
    result.store lang, lang_values
  end

  File.open(target_file,"w") do |f|
    f.write(JSON.pretty_generate(result))
  end
  puts ' > '+languages.join(', ').yellow  
end

#Prints on screen all the unused keys and also marks that keys on spreadsheet as unused
def check_unused_ios(worksheet, from_row, to_row, target_directory, mark)
  puts "\nUNUSED IOS KEYS:"
  for row in from_row..to_row
    key = worksheet[row, 1]
    unless key.blank?
      term = Term.new(key)
      if term.restriction == 'i' || term.restriction == nil
        if !term.is_comment?
          result = find_text_on_ios_files(target_directory,term.keyword_iphone_constant)
          if(result.length == 0)
            puts term.keyword_iphone_constant
            if(mark)
              #modifiying key on spreadsheet by prepending [u] to mark key as unused
              worksheet[row, 1] = '[u]'+key
            end
          end
        else
          puts "\n==> Group:"
        end
      end
    end
  end
  if(mark)
    worksheet.save()
  end
end

def find_text_on_ios_files(path,text)
  output = `find #{path} -type f -name *.m -exec grep -li \"#{text}\" {} +`
  output += `find #{path} -type f -name *.h ! -name *LocalizableConstants.h -exec grep -li \"#{text}\" {} +`
  return output
end

#Prints on screen all the unused keys and also marks that keys on spreadsheet as unused
def check_unused_android(worksheet, from_row, to_row, target_directory, mark)
  puts "\nUNUSED ANDROID KEYS:"
  for row in from_row..to_row
    key = worksheet[row, 1]
    unless key.blank?
      term = Term.new(key)
      if term.restriction == 'a' || term.restriction == nil
        if !term.is_comment?
          result = find_text_on_android_files(target_directory,term.keyword_android)
          if(result.length == 0)
            puts term.keyword_android
            if(mark)
              #modifiying key on spreadsheet by prepending [u] to mark key as unused
              worksheet[row, 1] = '[u]'+key
            end
          end
        else
          puts "\n==> Group:"
        end
      end
    end
  end
  if(mark)
    worksheet.save()
  end
end

def find_text_on_android_files(path,string_key)
  command = "find #{path} -type f -name '*.java' ! -name R.java -exec grep -li \"R.string.#{string_key}\" {} +"
  output = `#{command}`
  command = "find #{path} -type f -name '*.xml' ! -name gen-strings.xml -exec grep -li \"@string\/#{string_key}\" {} +"
  output += `#{command}`
  return output
end

# Parsing and commandline checks

show_error 'No parameters specified. Use the flag -h to see them all.' unless ARGV.size > 0

options = Parser.new do |p|
  p.banner = 'localizable-generator (c) 2019 EKGDev <elikohen@gmail.com>'
  p.version = '2.1.0'
  p.option :client_id, 'google Client id', :default => ''
  p.option :client_secret, 'google Client secret', :default => ''
  p.option :spreadsheet, 'Spreadsheet containing the localization info', :default => 'example-spreadsheet'
  p.option :spreadsheet_id, 'Spreadsheet id shown in the path of the url (just before /edit)', :default => ''
  p.option :just_credentials, '[Optional] If enabled, script just creates google credentials', :default => false
  p.option :output_ios, 'Path to the iOS localization directory', :default => '/the_path/Localizables/', :short => 'i'
  p.option :ios_constants_name, '[Optional] Constants localizable name for iOS', :default => 'LocalizedConstants', :short => 'n'
  p.option :ios_constants_extension, '[Optional] Whether to extend String or use LocalizedString struct', :default => false
  p.option :ios_constants_sufix, '[Optional] sufix to use on elements', :default => ''
  p.option :ios_just_swift, '[Optional] Whether to build constants just for swift', :default => true
  p.option :ios_add_base, '[Optional] Whether to add Base.lproj linked with the default language', :default => true
  p.option :output_android, 'Path to the resource directory of an Android project', :default => '/the_path/res/', :short => 'a'
  p.option :output_json, 'Path to the resource file of the output as json', :default => '/the_path/localizables.json', :short => 'j'
  p.option :keep_keys, '[Optional] Whether to maintain original keys or not', :default => false, :short => 'k'
  p.option :check_unused, '[Optional] Whether to check unused keys on project', :default => false , :short => 'c'
  p.option :check_unused_mark, '[Optional] When checking keys (--check-unused) -> mark them on spreadsheet prepending [u]', :default => false , :short => 'm'

end.process!

client_id = options[:client_id]
client_secret = options[:client_secret]
spreadsheet = options[:spreadsheet]
spreadsheet_id = options[:spreadsheet_id]
just_credentials = options[:just_credentials]
ios_path = options[:output_ios]
ios_constants_name = options[:ios_constants_name]
ios_constants_extension = options[:ios_constants_extension]
ios_constants_sufix = options[:ios_constants_sufix]
ios_just_swift = options[:ios_just_swift]
ios_add_base = options[:ios_add_base]
android_path = options[:output_android]
json_file = options[:output_json]
check_unused = options[:check_unused]
check_unused_mark = options[:check_unused_mark]
keep_keys = options[:keep_keys]

has_ios = ios_path != '/the_path/Localizables/'
has_android = android_path != '/the_path/res/'
has_json = json_file != '/the_path/localizables.json'

show_error 'You must provide a Client id and secret' if (client_id.blank? || client_secret.blank?) && !just_credentials
show_error 'You must provide a iOS, Android or JSON path at least to proceed' unless has_android || has_ios || has_json || just_credentials

# Get the spreadsheet from Google Drive
puts 'Logging in to Google Drive...'

CREDENTIALS_PATH = Dir.home + "/.locgen/#{spreadsheet}_key.json"
FileUtils.mkdir_p(File.dirname(CREDENTIALS_PATH))

begin 
  session = GoogleDrive.saved_session(CREDENTIALS_PATH, nil, client_id, client_secret)
rescue
  show_error 'Couldn\'t access Google Drive. Check your credentials!'
  exit -1
end

if just_credentials
  puts 'Created and stored credentials!'.cyan
  exit 0
end

# Recover our spreadsheets
puts 'Logged.'.cyan
matching_spreadsheets = []

if !spreadsheet_id.empty? 
  puts "Searching for Spreadsheet id: #{spreadsheet_id}"

  found_spreadsheet = session.spreadsheet_by_key(spreadsheet_id)
  show_error 'Invalid spreadsheet id' if !found_spreadsheet
else
  puts "Searching for spreadsheet name: #{spreadsheet}"

  session.spreadsheets(q: "name contains '[Localizables]'").each do |s|
    matching_spreadsheets << s if s.title.downcase.include?(spreadsheet.downcase)
  end

  if matching_spreadsheets.count > 1
    puts 'Found:'.cyan
    matching_spreadsheets.each { |ms| puts ms.title.red }
    show_error 'More than one match found. You have to be more specific!'
  elsif matching_spreadsheets.count == 0
    show_error "Unable to find any spreadsheet matching your criteria: #{spreadsheet}"
  end

  found_spreadsheet = matching_spreadsheets[0]
end

exit 1 if !found_spreadsheet
puts "Found one match: #{found_spreadsheet.title}".cyan

# Processing the spreadsheet

puts "Processing #{found_spreadsheet.title}..."
worksheet = found_spreadsheet.worksheets[0]
show_error 'Unable to retrieve the first worksheet from the spreadsheet' if worksheet.nil?

first_valid_row_index = nil
last_valid_row_index = nil

for row in 1..worksheet.max_rows
  first_valid_row_index = row if worksheet[row, 1].downcase == '[key]'
  last_valid_row_index = row if worksheet[row, 1].downcase == '[end]'
end

show_error 'Invalid format: Could not find any [key] keyword in the A column of the first worksheet' if first_valid_row_index.nil?
show_error 'Invalid format: Could not find any [end] keyword in the A column of the first worksheet' if last_valid_row_index.nil?
show_error 'Invalid format: [end] must not be before [key] in the A column' if first_valid_row_index > last_valid_row_index

languages = Hash.new('languages')
default_language = nil
key_comments = -1

for column in 2..worksheet.max_cols
  col_text = worksheet[first_valid_row_index, column]
  if col_text.downcase == '[comments]' 
    key_comments = column
  else
    default_language = col_text.downcase.gsub('*','') if col_text.include? '*'
    languages.store col_text.downcase.gsub('*',''), column unless col_text.blank?
  end
end

puts 'Languages: ' + languages.keys.join(', ').yellow
puts "Comments on column: #{key_comments}" unless key_comments == -1

puts 'Building terminology in memory...'

@terms = []
first_term_row = first_valid_row_index+1
last_term_row = last_valid_row_index-1

for row in first_term_row..last_term_row
  key = worksheet[row, 1]
  unless key.blank?
    key_comment = nil
    key_comment = worksheet[row,key_comments] unless key_comments == -1
    term = Term.new(key,key_comment,keep_keys)
    languages.each do |lang, column_index|
      term_text = worksheet[row, column_index]
      term.store_value(lang, term_text)
      if(term_text.blank?)
        puts "Warning: Missing ".red+"#{lang}".cyan+" for #{key}".red
      end
    end
    @terms << term
  end
end

puts 'Loaded.'.cyan

if has_ios
  puts 'Generating localizable files for ' + 'iOS'.green + '...'
  @current_lang = default_language
  generate_ios_constants(ios_path, ios_constants_name) unless ios_just_swift
  generate_ios_constants_swift(ios_path, ios_constants_name, ios_constants_extension, ios_constants_sufix)
  languages.keys.each do |lang|
    generate_ios lang, ios_path + "Base.lproj/" if ios_add_base && lang == default_language
    output_path = ios_path + "#{lang}.lproj/"
    generate_ios lang, output_path
  end
end
if has_android
  puts 'Generating localizable files for ' + 'Android'.green + '...'
  languages.keys.each do |lang|
    output_path = android_path + "res/values-#{lang}/"
    output_path = android_path + 'res/values/' if lang == default_language
    generate_android lang, output_path
  end
end
if has_json
  puts 'Generating localizable files for ' + 'JSON'.green + '...'
  generate_json languages.keys, json_file
end

puts 'Done! - Locale generation went smoothly :)'.green

if(check_unused)
  puts 'Checking unused'
  if(has_ios)
    check_unused_ios(worksheet, first_term_row, last_term_row, ios_path, check_unused_mark)
  end
  if(has_android)
    check_unused_android(worksheet, first_term_row, last_term_row, android_path, check_unused_mark)
  end
end



